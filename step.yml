AWSTemplateFormatVersion: '2010-09-09'
Description: A Step Function that calls an ECS Fargate Tasks.

"Parameters" :
  "Bucket" :
    "Type" : "String"
    "Description" : "The bucket to write ."
  "CidrVpc" :
    "Type" : "String"
    "Default" : "10.0.0.0/16"
    "Description" : "The VPC CIDR block."
  "CidrSubnet1" :
    "Type" : "String"
    "Default" : "10.0.0.0/24"
    "Description" : "The Subnet 1 CIDR block."
  "CidrSubnet2" :
    "Type" : "String"
    "Default" : "10.0.1.0/24"
    "Description" : "The Subnet 2 CIDR block."
  "ImageName" :
    "Type" : "String"
    "Default" : "timer"
    "Description" : "The name of the task and ECR image."

Resources:

  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref CidrVpc

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref CidrSubnet1
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref CidrSubnet2
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  RouteTableSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetOne'
      RouteTableId: !Ref 'PublicRouteTable'

  RouteTableSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetTwo'
      RouteTableId: !Ref 'PublicRouteTable'

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: Task
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 's3:PutObject'
            Resource: !Sub
              - 'arn:aws:s3:::${B}/*'
              - B: !Ref Bucket

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: ExecTask
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: !Sub
                - 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${I}:*'
                - I: !Ref ImageName
            - Effect: Allow
              Action: 'ecr:GetAuthorizationToken'
              Resource: !GetAtt 'ECSCluster.Arn'
          
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ImageName
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !Ref TaskExecutionRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform: 
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX        
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: !Ref ImageName
          Image: !Sub
            - '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${I}:latest'
            - I: !Ref ImageName
          Cpu: 0
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Essential: true
          EntryPoint: 
            - python3.13
          LogConfiguration: 
            LogDriver: awslogs
            Options: 
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Sub
                - '/ecs/${I}'
                - I: !Ref ImageName
              mode: non-blocking
              awslogs-create-group: true
              max-buffer-size: 25m
              awslogs-stream-prefix: ecs

  # Step Function
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "iam:PassRole"
                Resource: "*" 
                Condition: 
                  StringLike: 
                    'iam:PassedToService': 
                      - 'ecs-tasks.amazonaws.com'
              - Effect: Allow
                Action: "ecs:RunTask"
                Resource: !Sub
                  - 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${I}:*'
                  - I: !Ref ImageName 
              - Effect: Allow
                Action: 
                  - "ecs:StopTask"
                  - "ecs:DescribeTasks"
                Resource: !Sub
                  - 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${I}/*'
                  - I: !Ref ImageName 
              - Effect: Allow
                Action: 
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule'

  StepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
      DefinitionString:
        !Sub
          - |-
            {
              "QueryLanguage": "JSONPath",
              "Comment": "A delayed batch of Fargate timers",
              "StartAt": "Timer-Batch",
              "States": {
                "Timer-Batch": {
                  "Type": "Map",
                  "End": true,
                  "ItemsPath": "$.timer_info",
                  "ItemProcessor": {
                    "ProcessorConfig": {"Mode": "INLINE"},
                    "StartAt": "Wait",
                    "States": {
                      "Wait": {
                        "Type": "Wait",
                        "SecondsPath": "$.delay",
                        "Next": "Timer-Fargate"},
                      "Timer-Fargate": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::ecs:runTask.sync",
                        "End": true,
                        "Parameters": {
                          "LaunchType": "FARGATE",
                          "Cluster": "${C}",
                          "TaskDefinition": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${I}",
                          "NetworkConfiguration": {
                            "AwsvpcConfiguration": {
                              "Subnets": ["${SNOne}", "${SNTwo}"],
                              "SecurityGroups": ["${SG}"],
                              "AssignPublicIp": "ENABLED"}},
                          "Overrides": {
                            "ContainerOverrides": [{
                              "Name": "${I}",
                              "Command.$": "$.commands"}]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          - C: !GetAtt 'ECSCluster.Arn'
            I: !Ref ImageName 
            SG: !Ref 'SecurityGroup'
            SNOne: !Ref 'PublicSubnetOne'
            SNTwo: !Ref 'PublicSubnetTwo'

# Output
Outputs:
  StepFunction:
    Description: The ARN of the Step Function
    Value: !GetAtt 'StepFunction.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'StepFunction' ] ]
  TaskRunCmd:
    Description: AWS CLI command to run the task
    Value: !Join
      - ''
      - - 'aws ecs run-task --cluster '
        - !Ref 'ECSCluster'
        - ' --task-definition timer --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=['
        - !Ref 'PublicSubnetOne'
        - ','
        - !Ref 'PublicSubnetTwo'
        - '],securityGroups=['
        - !Ref 'SecurityGroup'
        - '],assignPublicIp=ENABLED}" --overrides '
        - "'"
        - '{ "containerOverrides": [{"name": "'
        - !Ref ImageName
        - '", "command": ["app.py", "--job_id", "2", "--duration", "2", "--bucket", "'
        - !Ref Bucket
        - '"]}]}'
        - "'"
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'TaskRunCmd' ] ]
  StepRunCmd:
    Description: AWS CLI command to run the Step Function
    Value: !Join
      - ''
      - - !Sub
          - 'aws stepfunctions start-execution --state-machine-arn ${SM} --input '
          - SM: !GetAtt 'StepFunction.Arn'
        - "'"
        - !Sub
          - '{"timer_info": [{"delay": 0, "commands": ["app.py", "--job_id", "1", "--duration", "3", "--bucket", "${B}"]},{"delay": 2,"commands": ["app.py", "--job_id", "2", "--duration", "4", "--bucket", "${B}"]}]}"'
          - B: !Ref Bucket
        - "'"
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'StepRunCmd' ] ]
